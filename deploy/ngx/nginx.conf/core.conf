server {
    listen 80;
    listen [::]:80;

    client_max_body_size 2048M;

    # set hosts resolver to default docker resolver ip
    # set caching server availability to 5 seconds
    resolver 127.0.0.11 valid=5s;

    # include proxy settings
    include conf.d/proxy.conf;

    error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 = @nginx_error;

    location @nginx_error {
      if ( $request_method = OPTIONS ) {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization';
        add_header 'Content-Length' '0';
        add_header 'Content-Type' 'text/plain';
        return 204;
      }

      if ( $request_method != OPTIONS ) {
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Origin,Content-Type,Accept,Authorization';
        add_header 'Content-Type' 'application/json; charset=utf-8';
        # Here we can mimic API error if needed.
        return 500 '{ "message": "NGINX ERROR. Some services may not be up and running or other error occurred on the PROXY side. Please review ngx container logs for more details. "}';
      }
    }

    # main api routes
    location / {
        set $upstream http://backend:8881;

        proxy_pass $upstream;
    }
}
